---------------------------------------------------------------------------

by weaverryan at 2015-09-17T03:09:58Z

This makes a lot of sense to me - make `autoload.php` anything that's always shared between the front controllers, console and tests.

---------------------------------------------------------------------------

by Pierstoval at 2015-09-17T06:40:01Z

:+1: , I always wondered why the bootstrap and the autoload were "merged". In dev I don't use the bootstrap, even if it is longer to load.

---------------------------------------------------------------------------

by Tobion at 2015-09-17T09:56:43Z

It would be safe to merge this in 2.3 actually.

---------------------------------------------------------------------------

by fabpot at 2015-09-17T10:07:38Z

That introduces an infinite loop between the autoloader and the bootstrap file. So, this can only be merged with versions of the bootstrap file that does not have the require on the autoload file. Which means changing the distribution bundle first, making a release, and then change the requirement in composer here.

---------------------------------------------------------------------------

by stof at 2015-09-17T10:32:46Z

and the change in the DistributionBundle also requires this, otherwise the autoloader is not loaded at all anymore.

But I'm -1 on this implementation: this would mean that phpunit would now be loading the bootstrap.php.cache file as it is common to have ``app/autoload.php`` loaded in the Bootstrap (which can break as some classes may have been loaded already by PHPUnit). We would have the same issue with the Behat Symfony2Extension (and there, I'm 100% sure that loading the bootstrap.php.cache file will break because of Symfony classes being loaded earlier in Behat as it uses several components).

If you want to split it, I think the front controller should be responsible for loading the autoloader and then the bootstrap file when wanted. This would solve many issues:

- no infinite loop (when using the current version of the bundle, you just load ``vendor/autoload.php`` twice, but this file is meant to be loadable as many times as you want to get access to the ClassLoader instance), no need for synchronized updates of the bundle and the SE
- easier disabling of the bootstrap file when debugging (http://symfony.com/doc/current/cookbook/debugging.html#disabling-the-bootstrap-file-and-class-caching): you just have to comment the line in the front controller rather than having to change it
- easy way to load the autoloading without the bootstrap file for tests (the same way than today)

---------------------------------------------------------------------------

by Tobion at 2015-09-17T11:22:48Z

> That introduces an infinite loop between the autoloader and the bootstrap file.

It does not as the files are only included `once`

> and the change in the DistributionBundle also requires this, otherwise the autoloader is not loaded at all anymore.

I don't see what you mean.

> this would mean that phpunit would now be loading the bootstrap.php.cache file

This was already the case before. This is the reason why I included the bootstrap in the autoload.

---------------------------------------------------------------------------

by Pierstoval at 2015-09-17T11:27:02Z

> > and the change in the DistributionBundle also requires this, otherwise the autoloader is not loaded at all anymore.

> I don't see what you mean.

The bootstrap file is generated by the SensioDistributionBundle, so it seems it has to be updated according to this update.

---------------------------------------------------------------------------

by stof at 2015-09-17T11:44:20Z

> It does not as the files are only included once

in this case, it means that the return value is broken. If the file was already loaded and the inclusion is skipped, this would return ``true`` instead of the ClassLoader.

> This was already the case before

no it was not forced. I know many projects using ``app/autoload.php`` as their PHPUnit bootstrap file, precisely to avoid loading the bootstrap.php.cache.

---------------------------------------------------------------------------

by Tobion at 2015-09-17T12:18:44Z

> no it was not forced. I know many projects using app/autoload.php as their PHPUnit bootstrap file, precisely to avoid loading the bootstrap.php.cache.

It still not forced, people can use whatever autoload file they see fit. This is just the default way, just as it was before.

> If you want to split it, I think the front controller should be responsible for loading the autoloader and then the bootstrap file when wanted.

So how do you include the bootstrap file for phpunit then? Or do you suggest to never do it at all?

> in this case, it means that the return value is broken

For whom is the return value broken? I don't see it. The new way has the return value correctly. And people using the old way, also still have the return value.

---------------------------------------------------------------------------

by stof at 2015-09-17T12:31:57Z

> It still not forced, people can use whatever autoload file they see fit. This is just the default way, just as it was before.

but this would mean that they have to duplicate the autoload.php file, or switch the autoload.php file to the structure I'm suggesting to avoid loading the bootstrap.php.cache file

> So how do you include the bootstrap file for phpunit then? Or do you suggest to never do it at all?

I don't include it. the bootstrap.php.cache file just duplicate some class definitions to perform a single loading for all of them instead of using autoloading. It is not necessary to use it (it is just a perf optimization). and not using it makes debugging easier.

> For whom is the return value broken? I don't see it. The new way has the return value correctly. And people using the old way, also still have the return value.

web/app.php uses the return value of the file.
Actually, it is even more broken today. Something needing the return value should not use the ``_once`` variants of the function, and do it on a file allowing to include it multiple times. Otherwise it is unreliable.

---------------------------------------------------------------------------

by Tobion at 2015-09-17T16:03:44Z

I moved the boostrap into the frontcontrollers and only in debug mode. So it fully fixes #788

---------------------------------------------------------------------------

by hacfi at 2015-09-17T16:08:09Z

The new version of the PR looks much better to me! `autoload.php` shouldnâ€™t have side-effects like including the bootstrap cache.
